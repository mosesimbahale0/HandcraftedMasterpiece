name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_SSH_HOST }}
          username: ${{ secrets.GCP_SSH_USERNAME }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            #!/bin/bash
            set -e

            DEPLOY_DIR="${{ github.repository }}"
            DEPLOY_DIR="${DEPLOY_DIR##*/}"
            
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            # Clean existing containers and images
            docker compose down --rmi all --volumes --remove-orphans || true

            # Clone fresh repository copy
            rm -rf .git # Remove existing git data
            git clone https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
            
            # Create .env from secrets
            echo "Generating .env file..."
            cat << EOF > .env
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            NODE_ENV=production
            PORT=4000
            EOF

            # Set strict permissions
            chmod 600 .env

            # Verify Docker can read .env
            if ! docker compose config --env-file .env > /dev/null 2>&1; then
              echo "❌ Docker Compose config validation failed!"
              docker compose config --env-file .env
              exit 1
            fi

            # Build with no cache and explicit env-file
            docker compose --env-file .env build --no-cache
            docker compose --env-file .env up -d --force-recreate



            














# name: Deploy

# on:
#   push:
#     branches: [main]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Deploy to VM
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.GCP_SSH_HOST }}
#           username: ${{ secrets.GCP_SSH_USERNAME }}
#           key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             #!/bin/bash
#             set -e

#             DEPLOY_DIR="${{ github.repository }}"
#             DEPLOY_DIR="${DEPLOY_DIR##*/}"
            
#             mkdir -p "$DEPLOY_DIR"
#             cd "$DEPLOY_DIR"

#             # Clone/update repo (without .env in version control)
#             if [ ! -d ".git" ]; then
#               git clone https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
#             else
#               git fetch --all
#               git reset --hard origin/main
#               git clean -fd
#             fi

#             # Create .env from scratch using secrets
#             echo "Generating .env file..."
#             cat << 'EOF' > .env
#             MONGODB_URI=${{ secrets.MONGODB_URI }}
#             REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
#             NODE_ENV=production
#             PORT=4000
#             EOF

#             # Verify .env creation
#             if [ ! -f ".env" ]; then
#               echo "❌ Critical error: .env file not created!"
#               exit 1
#             fi

#             # Deploy with Docker
#             docker compose --env-file .env down
#             docker compose --env-file .env up -d --build


